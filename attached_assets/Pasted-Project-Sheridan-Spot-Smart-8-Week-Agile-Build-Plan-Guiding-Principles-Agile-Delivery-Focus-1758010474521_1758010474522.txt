Project: Sheridan Spot Smart - 8-Week Agile Build Plan
Guiding Principles:

Agile Delivery: Focus on delivering a functional Minimum Viable Product (MVP) by the end of Week 4 (a working system with one camera feed) and enhancing it in the subsequent sprints.

Definition of Done (DoD): For a task to be considered "Done," it must be: Developed, Reviewed (PR approved), Tested (unit/integration tests pass), and Deployed to the staging environment.

Daily Standups: 15-minute meetings to discuss progress, blockers, and plan for the day.

Sprint Reviews: At the end of each week, the team demos completed functionality to stakeholders (e.g., each other, the professor).

Team Roles & Responsibilities
Talha (Backend Lead): Flask API development, AWS EC2/Infrastructure, Database design, RTSP integration, API authentication.

Arshdeep (Backend/Full-Stack): Assists with Flask API, focuses on Frontend-Backend integration, Google Maps API functionality, and state management.

Muskan (AI Lead): OpenCV implementation, parking spot detection algorithm development, model training with SuperGradients, image processing pipeline.

Ishrat (AI/Design): Assists with AI model training and validation, focuses on UI/UX design with Chakra UI, frontend component styling, and user feedback integration.

Product Backlog (Ordered by Priority)
Epic 1: Core Parking Detection Engine
Epic 2: User Application & Interface
Epic 3: Deployment & Infrastructure
Epic 4: Enhanced Features (Stretch Goals)

8-Week Sprint Plan
Sprint 1: Foundation & Core AI Setup (Week 1)
Goal: Set up all environments. Ingest a single video feed and successfully detect something (e.g., motion).

Day	Task	Description	Who	Epic
1	Local Dev Env Finalization	Ensure everyone can run Flask/React apps locally. Document setup process.	All	3
2	Staging Environment Setup	Create dev branch & configure CI/CD (GitHub Actions) to deploy to AWS on push.	Talha	3
3	Static Mock Data API	Create a Flask API endpoint (/api/parking) that returns hardcoded parking data.	Talha, Arshdeep	1
4	Connect Frontend to Mock API	Make the existing map fetch and display data from the new mock API.	Arshdeep	2
5	RTSP Feed Connection	Write a Python script to connect to a sample RTSP feed (e.g., public test stream) and display a frame.	Muskan, Ishrat	1
Sprint 2: MVP Detection Algorithm (Week 2)
Goal: Process a single frame from the video feed and identify parking spots and their status.

Day	Task	Description	Who	Epic
1	Frame Capture Service	Create a service that grabs a frame from the RTSP stream every 30 seconds.	Muskan	1
2	Parking Spot Definition	Create a tool to manually define coordinates of parking spots in a sample image. Save to a config file.	Ishrat	1
3-4	Occupancy Detection Logic	Implement basic OpenCV logic (e.g., background subtraction, color histograms) to check a defined spot for occupancy.	Muskan, Ishrat	1
5	MVP Detection API	Modify the Flask API to run the detection logic on the captured frame and return real results for the defined spots.	Talha, Muskan	1
Sprint 3: Database & Real-Time Updates (Week 3)
Goal: Store results in a database and update the frontend in near real-time.

Day	Task	Description	Who	Epic
1	NoSQL Database Design	Design & create MongoDB collections for ParkingLots, ParkingSpots, and AvailabilityLogs.	Talha	3
2	Database Integration	Connect Flask to MongoDB. Modify the detection API to write its results to the DB.	Talha, Arshdeep	1
3	API Endpoint Refactor	Change the main API endpoint to fetch data from the DB instead of running detection on-the-fly.	Arshdeep	1
4	Frontend Polling Mechanism	Implement a setInterval on the frontend to poll the API every 20 seconds for updated availability.	Arshdeep, Ishrat	2
5	Visual Feedback on Map	Update map markers/colors dynamically based on the polled data (e.g., Green=Available, Red=Occupied).	Ishrat, Arshdeep	2
Sprint 4: System Integration & MVP Demo (Week 4)
Goal: Integate all components. A fully working MVP for one parking lot is complete and deployed.

Day	Task	Description	Who	Epic
1	Scheduler Implementation	Implement a cron-like scheduler (e.g., APScheduler) to run the detection script automatically every 30 sec.	Talha	1
2	End-to-End Testing	Rigorous testing of the entire pipeline: RTSP -> OpenCV -> DB -> API -> Frontend. Fix all bugs.	All	3
3	Staging Deployment & Smoke Test	Deploy the fully integrated MVP to staging and run smoke tests.	Talha, Arshdeep	3
4	UI/UX Polish	Refine the frontend based on testing feedback. Ensure it's responsive and intuitive.	Ishrat, Arshdeep	2
5	MVP DEMO DAY	Internal demo of the working system. Celebrate the milestone.	All	-
Sprint 5: Multi-Lot Support & Improved AI (Week 5)
Goal: Scale the system to handle multiple camera feeds and improve detection accuracy.

Day	Task	Description	Who	Epic
1	Database Schema Update	Modify DB and API to support multiple ParkingLots (e.g., "Lot A", "Lot B").	Talha	1
2	Frontend Lot Selection	Add a dropdown or map UI for users to select which parking lot to view.	Arshdeep, Ishrat	2
3-4	ML Model Integration	Use SuperGradients to train a simple object detection model (YOLO-NAS) to identify cars. Integrate it into the detection pipeline.	Muskan, Ishrat	1
5	Performance Optimization	Benchmark the new model vs. the basic OpenCV method. Compare accuracy and speed.	Muskan	1
Sprint 6: User Features & Security (Week 6)
Goal: Add user authentication and personalization.

Day	Task	Description	Who	Epic
1-2	Auth0 / JWT Setup	Implement user login/signup using Auth0 or Flask-JWT-Extended. Secure API endpoints.	Talha	3
3	User Preferences DB	Create a collection to store user preferences (e.g., favorite lots).	Talha	2
4	Favorite Lots UI	Add frontend functionality for users to mark and quickly view their favorite lots.	Arshdeep, Ishrat	2
5	API Security Audit	Ensure all API communication uses HTTPS and sensitive data is encrypted.	Talha	3
Sprint 7: Advanced Features & Testing (Week 7)
Goal: Add one advanced feature and harden the application.

Day	Task	Description	Who	Epic
1-2	Notifications Feature	Implement backend (email/SMS) and frontend (opt-in) for notifications when a spot becomes available in a favorite lot.	Talha, Arshdeep	4
3	Load Testing	Use k6 or Locust to simulate 100+ users on the API. Scale EC2 instance if needed.	Talha	3
4	Cross-Browser Testing	Test the frontend on Chrome, Safari, Firefox, and Edge. Fix any inconsistencies.	Ishrat	2
5	Bug Bash & Documentation	Dedicated day to fixing minor bugs and writing user/developer documentation.	All	3
Sprint 8: Final Preparation & Release (Week 8)
Goal: Deploy the final product to production and create a release presentation.

Day	Task	Description	Who	Epic
1	Production Deployment	Deploy the final, tested version from main to the production environment (AWS).	Talha	3
2	Final End-to-End Test	Verify everything works perfectly in production.	All	3
3	Demo Video Recording	Record a high-quality screencast demonstrating the app's features.	Ishrat, Arshdeep	-
4-5	Presentation Prep	Prepare slides and practice the final presentation.